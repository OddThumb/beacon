% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/QT.R
\name{qtransform}
\alias{qtransform}
\title{Q-transform of time series}
\usage{
qtransform(
  ts,
  delta_t = NULL,
  delta_f = NULL,
  logfsteps = NULL,
  frange = NULL,
  qrange = c(4, 64),
  mismatch = 0.2,
  return_complex = FALSE
)
}
\arguments{
\item{ts}{A \code{ts} object. Input time series.}

\item{delta_t}{A numeric. Time resolution (optional).}

\item{delta_f}{A numeric. Frequency resolution (optional, mutually exclusive with \code{logfsteps}).}

\item{logfsteps}{A numeric. Number of log-spaced frequency bins (mutually exclusive with \code{delta_f}).}

\item{frange}{A numeric vector. Frequency range (Hz). Default: \code{c(30, Nyquist Ã— 8)}.}

\item{qrange}{A numeric vector. Q value range (default: \code{c(4, 64)}).}

\item{mismatch}{A numeric. Mismatch between tiles (default: 0.2).}

\item{return_complex}{Logical. Whether to return complex data instead of power (default: FALSE).}
}
\value{
A list with:
\describe{
  \item{times}{Time axis (s)}
  \item{freqs}{Frequency axis (Hz)}
  \item{q_plane}{2D matrix of interpolated Q-transform (power or complex)}
}
}
\description{
Perform a Q-transform over a time series and interpolate to desired resolution.
}
\details{
This is a ported implementation based on the original
\code{pycbc.filter.qtransform} function from the PyCBC library.
}
\references{
PyCBC source:
\url{https://pycbc.org/pycbc/latest/html/_modules/pycbc/filter/qtransform.html}
}
